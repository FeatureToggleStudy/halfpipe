# Generated using halfpipe cli version 0.0.0-DEV
groups: []
resources:
- name: git
  type: git
  source:
    uri: https://github.com/robwhitby/halfpipe-example-nodejs
- name: slack
  type: slack-notification
  source:
    url: https://hooks.slack.com/services/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
- name: artifacts-engineering-enablement-e2e-test
  type: gcp-resource
  source:
    bucket: halfpipe-io-artifacts
    folder: engineering-enablement/e2e-test
    json_key: ((gcr.private_key))
- name: CF dev-api engineering-enablement dev
  type: cf-resource
  source:
    api: dev-api
    org: engineering-enablement
    password: very-secret
    space: dev
    username: michiel
- name: CF api-live pe staging
  type: cf-resource
  source:
    api: ((cloudfoundry.api-live))
    org: pe
    password: very-secret
    space: staging
    username: michiel
- name: Docker Registry
  type: docker-image
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
resource_types:
- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest
- name: gcp-resource
  type: docker-image
  source:
    repository: platformengineering/gcp-resource
    tag: 0.19.0
- name: cf-resource
  type: docker-image
  source:
    repository: platformengineering/cf-resource
    tag: stable
jobs:
- name: Test
  serial: true
  plan:
  - get: git
    trigger: true
  - task: run
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: node
          tag: 9.5.0-alpine
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "Bash is not present in the docker image"
            echo "If you script, or any of the script your script is calling depends on bash you will get a strange error message like:"
            echo "sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi
          set -e
          export GIT_REVISION=`cat .git/ref`
          ./test.sh

          if [ -d target/distribution ]
          then
            mkdir -p ../artifacts/target/distribution
            cp -r target/distribution/. ../artifacts/target/distribution/
          elif [ -f target/distribution ]
          then
            artifactDir=$(dirname target/distribution)
            mkdir -p ../artifacts/$artifactDir
            cp target/distribution ../artifacts/$artifactDir
          else
            echo "ERROR: Artifact 'target/distribution' not found. Try fly hijack to check the filesystem."
            exit 1
          fi


          if [ -d README.md ]
          then
            mkdir -p ../artifacts/README.md
            cp -r README.md/. ../artifacts/README.md/
          elif [ -f README.md ]
          then
            artifactDir=$(dirname README.md)
            mkdir -p ../artifacts/$artifactDir
            cp README.md ../artifacts/$artifactDir
          else
            echo "ERROR: Artifact 'README.md' not found. Try fly hijack to check the filesystem."
            exit 1
          fi
        dir: git
      inputs:
      - name: git
        path: ""
      outputs:
      - name: artifacts
        path: ""
  - put: artifacts-engineering-enablement-e2e-test
    params:
      folder: artifacts
      version_file: git/.git/ref
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: deploy-cf
  serial: true
  plan:
  - get: git
    passed:
    - Test
    trigger: true
  - get: artifacts-engineering-enablement-e2e-test
    params:
      folder: artifacts
      version_file: git/.git/ref
  - put: CF dev-api engineering-enablement dev
    params:
      appPath: artifacts-engineering-enablement-e2e-test/target/distribution/artifact.zip
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: some.random.domain.com
  - put: CF dev-api engineering-enablement dev
    params:
      appPath: artifacts-engineering-enablement-e2e-test/target/distribution/artifact.zip
      command: halfpipe-promote
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: some.random.domain.com
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
  ensure:
    put: CF dev-api engineering-enablement dev
    params:
      appPath: artifacts-engineering-enablement-e2e-test/target/distribution/artifact.zip
      command: halfpipe-cleanup
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: some.random.domain.com
- name: deploy to staging
  serial: true
  plan:
  - get: git
    passed:
    - deploy-cf
    trigger: true
  - put: CF api-live pe staging
    params:
      appPath: git
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: live.cf.private.springer.com
      vars:
        A: "0.1"
        B: "false"
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: run smoke-test.sh
  serial: true
  plan:
  - get: git
    passed:
    - deploy to staging
    trigger: true
  - task: run
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-fly
          tag: latest
          username: _json_key
      params:
        A: blah
        TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.live.cf.private.springer.com
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "Bash is not present in the docker image"
            echo "If you script, or any of the script your script is calling depends on bash you will get a strange error message like:"
            echo "sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi
          set -e
          export GIT_REVISION=`cat .git/ref`
          ./smoke-test.sh
        dir: git
      inputs:
      - name: git
        path: ""
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: c-name
  serial: true
  plan:
  - get: git
    passed:
    - deploy to staging
    trigger: true
  - task: run
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-cdc-runner
          tag: latest
          username: _json_key
      params:
        CONSUMER_GIT_KEY: ((github.private_key))
        CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
        CONSUMER_HOST: c-host
        CONSUMER_PATH: ""
        CONSUMER_SCRIPT: /var/c-script
        DOCKER_COMPOSE_SERVICE: ""
        PROVIDER_HOST: halfpipe-example-kotlin-dev-staging-CANDIDATE.live.cf.private.springer.com
        PROVIDER_HOST_KEY: E2E_TEST_DEPLOYED_HOST
        PROVIDER_NAME: e2e-test
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "Bash is not present in the docker image"
            echo "If you script, or any of the script your script is calling depends on bash you will get a strange error message like:"
            echo "sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi
          set -e
          export GIT_REVISION=`cat .git/ref`
          \source /docker-lib.sh
          start_docker

          # get current revision of consumer
          REVISION=$(curl "${CONSUMER_HOST}/internal/version" | jq -r '.revision')

          # write git key to file
          echo "${CONSUMER_GIT_KEY}" > .gitkey
          chmod 600 .gitkey

          set -x

          # clone consumer into "consumer-repo" dir
          GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${CONSUMER_GIT_URI} consumer-repo
          cd consumer-repo/${CONSUMER_PATH}

          # checkout revision
          git checkout ${REVISION}

          # run the tests in code container
          # note: old system reads CF manifest env vars and sets them all here
          docker-compose run --no-deps \
            -e DEPENDENCY_NAME=${PROVIDER_NAME} \
            -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
            ${DOCKER_COMPOSE_SERVICE:-code} \
            ${CONSUMER_SCRIPT}

          rc=$?
          docker-compose down
          [ $rc -eq 0 ] || exit $rc
        dir: git
      inputs:
      - name: git
        path: ""
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: deploy to staging - promote
  serial: true
  plan:
  - get: git
    passed:
    - run smoke-test.sh
    - c-name
    trigger: true
  - put: CF api-live pe staging
    params:
      appPath: git
      command: halfpipe-promote
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: live.cf.private.springer.com
      vars:
        A: "0.1"
        B: "false"
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
  ensure:
    put: CF api-live pe staging
    params:
      appPath: git
      command: halfpipe-cleanup
      gitRefPath: git/.git/ref
      manifestPath: git/manifest.yml
      testDomain: live.cf.private.springer.com
      vars:
        A: "0.1"
        B: "false"
- name: push to docker registry
  serial: true
  plan:
  - get: git
    passed:
    - deploy to staging - promote
    trigger: true
  - put: Docker Registry
    params:
      build: git
      build_args:
        A: a
        B: b
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: run notify.sh
  serial: true
  plan:
  - get: git
    passed:
    - push to docker registry
    trigger: true
  - task: run
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: blah
          repository: busy
          tag: latest
          username: michiel
      params:
        A: a
        B: b
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "Bash is not present in the docker image"
            echo "If you script, or any of the script your script is calling depends on bash you will get a strange error message like:"
            echo "sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi
          set -e
          export GIT_REVISION=`cat .git/ref`
          ./notify.sh
        dir: git
      inputs:
      - name: git
        path: ""
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: docker-compose
  serial: true
  plan:
  - get: git
    passed:
    - run notify.sh
    trigger: true
  - task: run
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: amidos/dcind
          tag: latest
      params:
        GCR_PRIVATE_KEY: ((gcr.private_key))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          set -e
          export GIT_REVISION=`cat .git/ref`
          \source /docker-lib.sh
          start_docker
          docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io

          docker-compose run -e GIT_REVISION=${GIT_REVISION} app
          rc=$?

          docker-compose down

          [ $rc -eq 0 ] || exit $rc
        dir: git
      inputs:
      - name: git
        path: ""
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe
- name: another-c-name
  serial: true
  plan:
  - get: git
    passed:
    - docker-compose
    trigger: true
  - task: run
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-cdc-runner
          tag: latest
          username: _json_key
      params:
        CONSUMER_GIT_KEY: ((github.private_key))
        CONSUMER_GIT_URI: git@github.com:springernature/c-consumer
        CONSUMER_HOST: c-host
        CONSUMER_PATH: ""
        CONSUMER_SCRIPT: /home/dev/code/c-script
        DOCKER_COMPOSE_SERVICE: potato
        PROVIDER_HOST: p-host
        PROVIDER_HOST_KEY: E2E_TEST_DEPLOYED_HOST
        PROVIDER_NAME: e2e-test
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "Bash is not present in the docker image"
            echo "If you script, or any of the script your script is calling depends on bash you will get a strange error message like:"
            echo "sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi
          set -e
          export GIT_REVISION=`cat .git/ref`
          \source /docker-lib.sh
          start_docker

          # get current revision of consumer
          REVISION=$(curl "${CONSUMER_HOST}/internal/version" | jq -r '.revision')

          # write git key to file
          echo "${CONSUMER_GIT_KEY}" > .gitkey
          chmod 600 .gitkey

          set -x

          # clone consumer into "consumer-repo" dir
          GIT_SSH_COMMAND="ssh -o StrictHostKeychecking=no -i .gitkey" git clone ${CONSUMER_GIT_URI} consumer-repo
          cd consumer-repo/${CONSUMER_PATH}

          # checkout revision
          git checkout ${REVISION}

          # run the tests in code container
          # note: old system reads CF manifest env vars and sets them all here
          docker-compose run --no-deps \
            -e DEPENDENCY_NAME=${PROVIDER_NAME} \
            -e ${PROVIDER_HOST_KEY}=${PROVIDER_HOST} \
            ${DOCKER_COMPOSE_SERVICE:-code} \
            ${CONSUMER_SCRIPT}

          rc=$?
          docker-compose down
          [ $rc -eq 0 ] || exit $rc
        dir: git
      inputs:
      - name: git
        path: ""
  on_failure:
    put: slack
    params:
      channel: '#ee-re'
      icon_url: https://concourse.halfpipe.io/public/images/favicon-failed.png
      text: The pipeline `$BUILD_PIPELINE_NAME` failed at `$BUILD_JOB_NAME`. <$ATC_EXTERNAL_URL/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME>
      username: Halfpipe

