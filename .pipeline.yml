groups: []
resources:
- name: artifactory-linux
  type: artifactory
  source:
    endpoint: https://springernature.jfrog.io/springernature
    password: ((artifactory.password))
    regex: halfpipe_linux_(?<version>.*)
    repository: /halfpipe
    username: ((artifactory.username))
- name: halfpipe
  type: git
  source:
    branch: master
    private_key: ((github.private_key))
    uri: git@github.com:springernature/halfpipe.git
- name: version
  type: semver
  source:
    branch: version
    driver: git
    file: version
    private_key: ((github.private_key))
    uri: git@github.com:springernature/halfpipe.git
- name: artifactory-darwin
  type: artifactory
  source:
    endpoint: https://springernature.jfrog.io/springernature
    password: ((artifactory.password))
    regex: halfpipe_darwin_(?<version>.*)
    repository: /halfpipe
    username: ((artifactory.username))
- name: artifactory-windows
  type: artifactory
  source:
    endpoint: https://springernature.jfrog.io/springernature
    password: ((artifactory.password))
    regex: halfpipe_windows_(?<version>.*).exe
    repository: /halfpipe
    username: ((artifactory.username))
- name: release
  type: github-release
  source:
    access_token: ((api-keys.halfpipe-cli))
    owner: springernature
    repository: halfpipe
resource_types:
- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource
jobs:
- name: Test
  serial: true
  plan:
  - get: halfpipe
    trigger: true
  - task: Test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: 1.11-alpine3.7
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          ls -al
          export GOPATH=$PWD
          cd src/github.com/springernature/halfpipe
          go test ./...
      inputs:
      - name: halfpipe
        path: /src/github.com/springernature/halfpipe
- name: Bump Major
  plan:
  - put: version
    params:
      bump: major
- name: Bump Minor
  plan:
  - put: version
    params:
      bump: minor
- name: Bump Patch
  plan:
  - put: version
    params:
      bump: patch
- name: End2End Test
  serial: true
  plan:
  - get: halfpipe
    passed:
    - Test
    trigger: true
  - task: Test
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-fly
          username: _json_key
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          export ROOT="$PWD"
          export GOPATH="$PWD"
          export CONF_PKG="github.com/springernature/halfpipe/config"
          export LDFLAGS="-X ${CONF_PKG}.Version=0.0.0-DEV"
          export LDFLAGS="${LDFLAGS} -X ${CONF_PKG}.VaultPrefix=springernature"
          export LDFLAGS="${LDFLAGS} -X ${CONF_PKG}.SlackWebhook=https://hooks.slack.com/services/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"
          echo "LDFLAGS=${LDFLAGS}"

          # Build binaries
          cd src/github.com/springernature/halfpipe
          CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -o halfpipe_linux -ldflags "${LDFLAGS}" cmd/halfpipe.go

          cd e2e_test
          ./test.sh ../halfpipe_linux
      inputs:
      - name: halfpipe
        path: /src/github.com/springernature/halfpipe
- name: Release
  disable_manual_trigger: true
  plan:
  - aggregate:
    - get: halfpipe
      passed:
      - End2End Test
    - get: version
      trigger: true
  - task: Build
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: 1.11-alpine3.7
      run:
        path: /bin/sh
        args:
        - -ec
        - |
          export ROOT="$PWD"
          export GOPATH="$PWD"
          export VERSION="$(cat version/version)"
          export CONF_PKG="github.com/springernature/halfpipe/config"
          export LDFLAGS="-X ${CONF_PKG}.Version=${VERSION}"
          export LDFLAGS="${LDFLAGS} -X ${CONF_PKG}.VaultPrefix=springernature"
          export LDFLAGS="${LDFLAGS} -X ${CONF_PKG}.SlackWebhook=https://hooks.slack.com/services/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"
          echo "LDFLAGS=${LDFLAGS}"

          # Build binaries
          cd src/github.com/springernature/halfpipe
          CGO_ENABLED=0 GOARCH=amd64 GOOS=darwin go build -o halfpipe_darwin_$VERSION -ldflags "${LDFLAGS}" cmd/halfpipe.go
          CGO_ENABLED=0 GOARCH=amd64 GOOS=linux go build -o halfpipe_linux_$VERSION -ldflags "${LDFLAGS}" cmd/halfpipe.go
          CGO_ENABLED=0 GOARCH=amd64 GOOS=windows go build -o halfpipe_windows_$VERSION.exe -ldflags "${LDFLAGS}" cmd/halfpipe.go

          cp halfpipe_darwin_$VERSION halfpipe_linux_$VERSION halfpipe_windows_$VERSION.exe $ROOT/binaries
      inputs:
      - name: halfpipe
        path: src/github.com/springernature/halfpipe
      - name: version
      outputs:
      - name: binaries
  - put: halfpipe
    params:
      repository: halfpipe
      tag: version/version
  - put: release
    params:
      globs:
      - binaries/halfpipe_*
      name: halfpipe/name
      tag: version/version
  - put: artifactory-darwin
    params:
      file: binaries/halfpipe_darwin_*
  - put: artifactory-linux
    params:
      file: binaries/halfpipe_linux_*
  - put: artifactory-windows
    params:
      file: binaries/halfpipe_windows_*
