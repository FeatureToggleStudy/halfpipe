# Generated using halfpipe cli version 0.0.0-DEV
groups: []
resources:
- name: git
  type: git
  source:
    branch: master
    paths:
    - e2e/artifacts
    private_key: ((github.private_key))
    uri: git@github.com:springernature/halfpipe.git
- name: artifacts-CHANGE-ME-halfpipe-e2e-artifacts
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: change-me/halfpipe-e2e-artifacts
    json_key: ((halfpipe-artifacts.private_key))
- name: artifacts-CHANGE-ME-halfpipe-e2e-artifacts-on-failure
  type: gcp-resource
  source:
    bucket: ((halfpipe-artifacts.bucket))
    folder: change-me/halfpipe-e2e-artifacts
    json_key: ((halfpipe-artifacts.private_key))
- name: CF live pe staging
  type: cf-resource
  source:
    api: ((cloudfoundry.api-live))
    org: pe
    password: very-secret
    space: staging
    username: michiel
- name: Docker Registry
  type: docker-image
  source:
    password: verysecret
    repository: springerplatformengineering/halfpipe-fly
    username: rob
resource_types:
- name: gcp-resource
  type: docker-image
  source:
    repository: platformengineering/gcp-resource
    tag: stable
- name: cf-resource
  type: docker-image
  source:
    repository: platformengineering/cf-resource
    tag: stable
jobs:
- name: create-artifact
  serial: true
  plan:
  - aggregate:
    - get: git
      trigger: true
    timeout: 1h
  - task: create-artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2
            if [ -d $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT
              cp -r $ARTIFACT/. $ARTIFACT_OUT_PATH/$ARTIFACT/
            elif [ -f $ARTIFACT ] ; then
              ARTIFACT_DIR=$(dirname $ARTIFACT)
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
              cp $ARTIFACT $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact .halfpipe.io.yml ../../../artifacts-out-failure
            exit 1
          fi

          # Artifacts to copy from task
          copyArtifact artifact ../../../artifacts-out
        dir: git/e2e/artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts-out
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  - put: artifacts
    resource: artifacts-CHANGE-ME-halfpipe-e2e-artifacts
    params:
      folder: artifacts-out
      version_file: git/.git/ref
    timeout: 1h
  on_failure:
    aggregate:
    - put: artifacts-on-failure
      resource: artifacts-CHANGE-ME-halfpipe-e2e-artifacts-on-failure
      params:
        folder: artifacts-out-failure
        postfix: failure
        version_file: git/.git/ref
- name: read-artifact
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - create-artifact
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: change-me/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - task: read-artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
          tag: latest
      params:
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. .

          export GIT_REVISION=`cat ../../.git/ref`

          ./a
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
- name: deploy to staging
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - read-artifact
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: change-me/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - put: cf halfpipe-push
    resource: CF live pe staging
    params:
      appPath: git/e2e/artifacts
      command: halfpipe-push
      gitRefPath: git/.git/ref
      manifestPath: git/e2e/artifacts/manifest.yml
      testDomain: live.cf.private.springer.com
      timeout: 1h
      vars:
        A: "0.1"
        B: "false"
    timeout: 1h
    attempts: 2
  - aggregate:
    - do:
      - task: run a
        config:
          platform: linux
          image_resource:
            type: docker-image
            source:
              password: ((gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-fly
              tag: latest
              username: _json_key
          params:
            A: blah
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
            TEST_ROUTE: halfpipe-example-kotlin-dev-staging-CANDIDATE.live.cf.private.springer.com
          run:
            path: /bin/sh
            args:
            - -c
            - |
              which bash > /dev/null
              if [ $? != 0 ]; then
                echo "WARNING: Bash is not present in the docker image"
                echo "If your script depends on bash you will get a strange error message like:"
                echo "  sh: yourscript.sh: command not found"
                echo "To fix, make sure your docker image contains bash!"
                echo ""
                echo ""
              fi

              if [ -e /etc/alpine-release ]
              then
                echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                echo "There is a known issue where DNS resolving does not work as expected"
                echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                echo "we recommend debian:stretch-slim as an alternative"
                echo ""
                echo ""
              fi

              # Copying in artifacts from previous task
              cp -r ../../../artifacts/. .

              export GIT_REVISION=`cat ../../.git/ref`

              ./a
              EXIT_STATUS=$?
              if [ $EXIT_STATUS != 0 ] ; then
                exit 1
              fi
            dir: git/e2e/artifacts
          inputs:
          - name: git
          - name: artifacts
          caches:
          - path: ../../../var/halfpipe/cache
          - path: ../../../halfpipe-cache
        attempts: 1
    timeout: 1h
  - put: cf halfpipe-promote
    resource: CF live pe staging
    params:
      command: halfpipe-promote
      manifestPath: git/e2e/artifacts/manifest.yml
      testDomain: live.cf.private.springer.com
      timeout: 1h
    timeout: 1h
    attempts: 2
  ensure:
    put: cf halfpipe-cleanup
    resource: CF live pe staging
    params:
      command: halfpipe-cleanup
      manifestPath: git/e2e/artifacts/manifest.yml
      timeout: 1h
    timeout: 1h
    attempts: 2
- name: push to docker registry
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - deploy to staging
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: change-me/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - task: Copying git repo and artifacts to a temporary build dir
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: /bin/sh
        args:
        - -c
        - |-
          cp -r git/. docker_build
          cp -r artifacts/. docker_build/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: docker_build
    timeout: 1h
  - put: Docker Registry
    params:
      build: docker_build/e2e/artifacts
      build_args:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        B: b
      tag_as_latest: true
    timeout: 1h
    attempts: 1
- name: docker-compose
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - push to docker registry
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: change-me/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - task: docker-compose
    privileged: true
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-docker-compose
          tag: stable
          username: _json_key
      params:
        A: a
        ARTIFACTORY_PASSWORD: ((artifactory.password))
        ARTIFACTORY_URL: ((artifactory.url))
        ARTIFACTORY_USERNAME: ((artifactory.username))
        GCR_PRIVATE_KEY: ((gcr.private_key))
        HALFPIPE_CACHE_TEAM: CHANGE-ME
      run:
        path: docker.sh
        args:
        - -c
        - |
          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          copyArtifact() {
            ARTIFACT=$1
            ARTIFACT_OUT_PATH=$2
            if [ -d $ARTIFACT ] ; then
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT
              cp -r $ARTIFACT/. $ARTIFACT_OUT_PATH/$ARTIFACT/
            elif [ -f $ARTIFACT ] ; then
              ARTIFACT_DIR=$(dirname $ARTIFACT)
              mkdir -p $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
              cp $ARTIFACT $ARTIFACT_OUT_PATH/$ARTIFACT_DIR
            else
              echo "ERROR: Artifact '$ARTIFACT' not found. Try fly hijack to check the filesystem."
              exit 1
            fi
          }

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. .

          export GIT_REVISION=`cat ../../.git/ref`

          \docker login -u _json_key -p "$GCR_PRIVATE_KEY" https://eu.gcr.io
          docker-compose  run -e A -e ARTIFACTORY_PASSWORD -e ARTIFACTORY_URL -e ARTIFACTORY_USERNAME -e GIT_REVISION -e HALFPIPE_CACHE_TEAM -v /var/halfpipe/cache:/var/halfpipe/cache -v /var/halfpipe/shared-cache:/var/halfpipe/shared-cache app

          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            # Artifacts to copy in case of failure
            copyArtifact docker-compose.yml ../../../artifacts-out-failure
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      outputs:
      - name: artifacts-out-failure
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1
  on_failure:
    aggregate:
    - put: artifacts-on-failure
      resource: artifacts-CHANGE-ME-halfpipe-e2e-artifacts-on-failure
      params:
        folder: artifacts-out-failure
        postfix: failure
        version_file: git/.git/ref
- name: deploy-ml-zip
  serial: true
  plan:
  - aggregate:
    - get: git
      passed:
      - docker-compose
      trigger: true
    timeout: 1h
  - task: get artifact
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: platformengineering/gcp-resource
          tag: stable
      params:
        BUCKET: ((halfpipe-artifacts.bucket))
        FOLDER: change-me/halfpipe-e2e-artifacts
        JSON_KEY: ((halfpipe-artifacts.private_key))
        VERSION_FILE: git/.git/ref
      run:
        path: /opt/resource/download
        args:
        - .
        dir: artifacts
      inputs:
      - name: git
      outputs:
      - name: artifacts
    timeout: 1h
  - task: deploy-ml-zip
    config:
      platform: linux
      image_resource:
        type: docker-image
        source:
          password: ((gcr.private_key))
          repository: eu.gcr.io/halfpipe-io/halfpipe-ml-deploy
          tag: latest
          username: _json_key
      params:
        APP_NAME: halfpipe-e2e-artifacts
        DEPLOY_ZIP: target/xquery.zip
        MARKLOGIC_HOST: ml.dev.springer-sbm.com
      run:
        path: /bin/sh
        args:
        - -c
        - |
          which bash > /dev/null
          if [ $? != 0 ]; then
            echo "WARNING: Bash is not present in the docker image"
            echo "If your script depends on bash you will get a strange error message like:"
            echo "  sh: yourscript.sh: command not found"
            echo "To fix, make sure your docker image contains bash!"
            echo ""
            echo ""
          fi

          if [ -e /etc/alpine-release ]
          then
            echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
            echo "There is a known issue where DNS resolving does not work as expected"
            echo "https://github.com/gliderlabs/docker-alpine/issues/255"
            echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
            echo "we recommend debian:stretch-slim as an alternative"
            echo ""
            echo ""
          fi

          # Copying in artifacts from previous task
          cp -r ../../../artifacts/. .

          export GIT_REVISION=`cat ../../.git/ref`

          /ml-deploy/deploy-local-zip
          EXIT_STATUS=$?
          if [ $EXIT_STATUS != 0 ] ; then
            exit 1
          fi
        dir: git/e2e/artifacts
      inputs:
      - name: git
      - name: artifacts
      caches:
      - path: ../../../var/halfpipe/cache
      - path: ../../../halfpipe-cache
    timeout: 1h
    attempts: 1

