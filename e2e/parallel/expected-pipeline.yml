# Generated using halfpipe cli version 0.0.0-DEV
groups: []
resources:
  - name: git
    type: git
    source:
      branch: master
      paths:
        - e2e/parallel
      private_key: ((github.private_key))
      uri: git@github.com:springernature/halfpipe.git
  - name: version
    type: semver
    source:
      bucket: ((halfpipe-semver.bucket))
      driver: gcs
      json_key: ((halfpipe-semver.private_key))
      key: test-test
resource_types: []
jobs:
  - name: update
    serial: true
    plan:
      - aggregate:
          - get: git
            trigger: true
            params:
              depth: 1
      - put: version
        params:
          bump: minor
        attempts: 2
      - task: halfpipe update
        config:
          platform: linux
          image_resource:
        type: registry-image
            source:
              password: ((gcr.private_key))
              repository: eu.gcr.io/halfpipe-io/halfpipe-auto-update
              tag: latest
              username: _json_key
          params:
            CONCOURSE_PASSWORD: ((concourse.password))
            CONCOURSE_TEAM: ((concourse.team))
            CONCOURSE_USERNAME: ((concourse.username))
            PIPELINE_NAME: test
          run:
            path: /bin/update-pipeline
            dir: git/e2e/parallel
          inputs:
            - name: git
            - name: version
        attempts: 2
  - name: test parallel 1
    serial: true
    plan:
      - aggregate:
          - get: git
            passed:
              - update
            params:
              depth: 1
          - get: version
            passed:
              - update
            trigger: true
        timeout: 1h
      - task: test parallel 1
        config:
          platform: linux
          image_resource:
        type: registry-image
            source:
              repository: alpine
              tag: test
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                which bash > /dev/null
                if [ $? != 0 ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./a
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
            dir: git/e2e/parallel
          inputs:
            - name: git
            - name: version
          caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
        timeout: 1h
        attempts: 1
  - name: test parallel 2
    serial: true
    plan:
      - aggregate:
          - get: git
            passed:
              - update
            params:
              depth: 1
          - get: version
            passed:
              - update
            trigger: true
        timeout: 1h
      - task: test parallel 2
        config:
          platform: linux
          image_resource:
        type: registry-image
            source:
              repository: alpine
              tag: test
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                which bash > /dev/null
                if [ $? != 0 ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./a
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
            dir: git/e2e/parallel
          inputs:
            - name: git
            - name: version
          caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
        timeout: 1h
        attempts: 1
  - name: after parallel
    serial: true
    plan:
      - aggregate:
          - get: git
            passed:
              - test parallel 1
              - test parallel 2
            params:
              depth: 1
          - get: version
            passed:
              - test parallel 1
              - test parallel 2
            trigger: true
        timeout: 1h
      - task: after parallel
        config:
          platform: linux
          image_resource:
        type: registry-image
            source:
              repository: alpine
              tag: test
          params:
            ARTIFACTORY_PASSWORD: ((artifactory.password))
            ARTIFACTORY_URL: ((artifactory.url))
            ARTIFACTORY_USERNAME: ((artifactory.username))
          run:
            path: /bin/sh
            args:
              - -c
              - |
                which bash > /dev/null
                if [ $? != 0 ]; then
                  echo "WARNING: Bash is not present in the docker image"
                  echo "If your script depends on bash you will get a strange error message like:"
                  echo "  sh: yourscript.sh: command not found"
                  echo "To fix, make sure your docker image contains bash!"
                  echo ""
                  echo ""
                fi

                if [ -e /etc/alpine-release ]
                then
                  echo "WARNING: you are running your build in a Alpine image or one that is based on the Alpine"
                  echo "There is a known issue where DNS resolving does not work as expected"
                  echo "https://github.com/gliderlabs/docker-alpine/issues/255"
                  echo "If you see any errors related to resolving hostnames the best course of action is to switch to another image"
                  echo "we recommend debian:stretch-slim as an alternative"
                  echo ""
                  echo ""
                fi

                export GIT_REVISION=`cat ../../.git/ref`
                export BUILD_VERSION=`cat ../../../version/version`

                ./a
                EXIT_STATUS=$?
                if [ $EXIT_STATUS != 0 ] ; then
                  exit 1
                fi
            dir: git/e2e/parallel
          inputs:
            - name: git
            - name: version
          caches:
            - path: ../../../var/halfpipe/cache
            - path: ../../../halfpipe-cache
        timeout: 1h
        attempts: 1

